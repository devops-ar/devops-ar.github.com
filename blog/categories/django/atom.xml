<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | devops-ar]]></title>
  <link href="http://devops-ar.github.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://devops-ar.github.com/"/>
  <updated>2012-09-22T15:24:49-03:00</updated>
  <id>http://devops-ar.github.com/</id>
  <author>
    <name><![CDATA[osvaldo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Usando python con virtualenv ]]></title>
    <link href="http://devops-ar.github.com/blog/2011/11/26/usando-python-con-virtualenv/"/>
    <updated>2011-11-26T00:08:00-03:00</updated>
    <id>http://devops-ar.github.com/blog/2011/11/26/usando-python-con-virtualenv</id>
    <content type="html"><![CDATA[<p>Una buena introducción se puede encontrar aca en los siguientes posts, uno en <a href="http://www.saltycrane.com/blog/2009/05/notes-using-pip-and-virtualenv-django/">inglés</a> y otro en <a href="http://elweb.co/uncategorized/django-deployment-3-virtualenv-virtualenvwrapper-pip/">castellano</a>.</p>

<p>Sistemas Operativos como CentOS o Gentoo hacen uso de python para sus herramientas de gestión de paquetes, no es recomendable modificar manualmente la versión de python o jugar con las versiones de los módulos. Pero puede suceder que nos haga falta utilizar una versión superior de python o cierto módulo para un proyecto en el que estemos trabajando. En este caso, virtualenv es una solución.</p>

<p>Virtualenv nos permite tener una instalacion de python aislada de la versión del sistema. Junto con esta versión de python, se pueden instalar los módulos que se necesiten sin que esto influya en absoluto en la instalación de python del sistema.</p>

<p>El primer paso seria instalar algunos paquetes que vamos a necesitar. Como estamos trabajando sobre Debian 6 Squeeze, apt-get es nuestro amigo. Utilizamos sudo porque nunca trabajamos como root, correcto? :P</p>

<p>{% codeblock %}
sudo apt-get install python-setuptools python-dev build-essential</p>

<h1>export http_proxy="http://proxy.example.com:3128/"</h1>

<p>sudo easy_install -U pip
sudo pip install -U virtualenv
sudo easy_install -U virtualenvwrapper
{% endcodeblock %}</p>

<p>El siguiente paso sería crear la carpeta donde vamos a guardar nuestro proyecto. Tambien nos aseguramos de que cada vez que creemos una sesion de trabajo, las variables de entorno requeridas sean creadas. Con el comando mkvirtualenv creamos el entorno que vamos a utilizar.</p>

<p>{% codeblock %}
mkdir -p ~/Sites/.virtualenvs/status.devops.com.ar
cat >> ~/.bashrc &lt;&lt;EOF
export WORKON_HOME=$HOME/Sites/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
EOF
mkvirtualenv --no-site-packages --distribute  status.devops.com.ar
{% endcodeblock %}</p>

<p>En la consola se obtendría algo similar a lo siguiente.</p>

<p><code>
osvaldo@vostro:~$ mkvirtualenv --no-site-packages  --distribute  status.devops.com.ar
New python executable in status.devops.com.ar/bin/python
Installing distribute....................................................................................................................................................................................done.
Installing pip...............done.
virtualenvwrapper.user_scripts creating /home/osvaldo/Sites/.virtualenvs/status.devops.com.ar/bin/predeactivate
virtualenvwrapper.user_scripts creating /home/osvaldo/Sites/.virtualenvs/status.devops.com.ar/bin/postdeactivate
virtualenvwrapper.user_scripts creating /home/osvaldo/Sites/.virtualenvs/status.devops.com.ar/bin/preactivate
virtualenvwrapper.user_scripts creating /home/osvaldo/Sites/.virtualenvs/status.devops.com.ar/bin/postactivate
virtualenvwrapper.user_scripts creating /home/osvaldo/Sites/.virtualenvs/status.devops.com.ar/bin/get_env_details
</code></p>

<p>Para probar, utilizamos un interesante dashboard creado por la gente de discus.com utilizando Django: <a href="http://code.disqus.com/code/projects/overseer.html">overseer</a></p>

<p>Se puede descargar overseer desde github o simplemente instalarlo utilizando pip.</p>

<p>El comando (workon) nos permite acceder al entorno aislado recién creado. Una vez dentro del mismo, podemos trabajar sin relación con el python o los módulos del sistema, solo lo que haya dentro de ese entorno.</p>

<p>{% codeblock lang:sh %}
workon status.devops.com.ar
mkdir -p ~/Sites/status_devops/requirements/
cat > ~/Sites/status_devops/requirements/requirements.txt &lt;&lt;EOF
django
EOF
pip install -r ~/Sites/status_devops/requirements/requirements.txt
pip install overseer
python manage.py syncdb
./manage.py migrate overseer
python manage.py runserver
{% endcodeblock %}</p>

<p>Una vez dentro del entorno podemos comprobar que el binario de python que se esta utilizando es él que instalamos dentro de dicho entorno y no él del sistem.</p>

<p>```
osvaldo@vostro:~$ workon status.devops.com.ar
(status.devops.com.ar)osvaldo@vostro:~$
(status.devops.com.ar)osvaldo@vostro:~$ which python
/home/osvaldo/Sites/.virtualenvs/status.devops.com.ar/bin/python
(status.devops.com.ar)osvaldo@vostro:~$ cd ~/Sites/status_devops/example_project
(status.devops.com.ar)osvaldo@vostro:~/Sites/status_devops/example_project$ python manage.py runserver
Validating models...
0 errors found</p>

<p>Django version 1.2.4, using settings 'example_project.settings'
Running django-devserver 0.3.1
Threaded django server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
```</p>

<p>Y el sitio se encuentra disponible para recibir consultas a traves de la url que recién se habilito.</p>

<p><code>
http://127.0.0.1:8000/
</code></p>

<p>Una vez terminado el trabajo en el entorno, lo desactivamos para regresar a nuestro entorno habitual con el siguiente comando.</p>

<p>{% codeblock %}
deactivate
{% endcodeblock %}</p>

<p>et voila!</p>
]]></content>
  </entry>
  
</feed>
