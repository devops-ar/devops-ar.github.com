<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: centos | devops-ar]]></title>
  <link href="http://devops-ar.github.com/blog/categories/centos/atom.xml" rel="self"/>
  <link href="http://devops-ar.github.com/"/>
  <updated>2012-11-20T11:17:04-03:00</updated>
  <id>http://devops-ar.github.com/</id>
  <author>
    <name><![CDATA[osvaldo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[instalando ldap server]]></title>
    <link href="http://devops-ar.github.com/blog/2012/10/03/instalando-ldap-server/"/>
    <updated>2012-10-03T08:47:00-03:00</updated>
    <id>http://devops-ar.github.com/blog/2012/10/03/instalando-ldap-server</id>
    <content type="html"><![CDATA[<p>A continuación se detalla la instalación de un directorio LDAP. Se siguen los pasos para la instalación del servidor ldap (openldap), la creación de la estructura inicial del directorio y por último, la instalación de una herramienta web para su administración.</p>

<p>Los comandos para la instalación son especifícos para CentOS. La configuración seria la misma para cualquier otra plataforma que utilice las mismas aplicaciones.</p>

<!-- more -->


<h1>LDAP</h1>

<p>Primero se instala el ldap server, openldap en este caso.</p>

<p><code>sh
yum install openldap-servers
</code></p>

<p>El primer paso seria configurar el servidor ldap. Para esto se edita el archivo <code>/etc/openldap/slapd.conf</code>. Lo mas importante es definir el sufijo que se va a utilizar para el directorio (lo que en DNS seria el dominio para el cual vamos a ser autoritativos). Además, las credenciales de la cuenta de administrador del directorio (para simplificar la instalación se declara la contraseña en texto claro, se debe utilizar un hash en un servidor de producción).</p>

<p><code>apacheconf /etc/openldap/slapd.conf
suffix          "dc=acme.example.com"
rootdn          "cn=root,dc=acme.example.com"
rootpw          9pbK5kkp
</code></p>

<p>Se crea la estructura inicial del directorio (<a href="http://www.brennan.id.au/20-Shared_Address_Book_LDAP.html">referencia</a>).</p>

<p>```sh
cat >/etc/openldap/initial-schema.ldif&lt;&lt;'EOF'
dn: dc=acme.example.com
objectclass: dcObject
objectclass: organization
o: ACME LDAP Server
dc: acme.example.com</p>

<p>dn: cn=Manager,dc=acme.example.com
objectclass: organizationalRole
cn: Manager</p>

<p>dn: ou=users,dc=acme.example.com
ou: users
objectClass: top
objectClass: organizationalUnit
EOF
```</p>

<p>cargamos la estructura inicial del directorio con el comando
<code>ldapadd -x -D 'cn=root,dc=acme.example.com' -W -f
/etc/openldap/initial-schema.ldif</code></p>

<p>```sh
[root@trinity phpldapadmin]# ldapadd -x -D
'cn=root,dc=acme.example.com' -W -f
/etc/openldap/initial-schema.ldif
Enter LDAP Password:
adding new entry "dc=acme.example.com"</p>

<p>adding new entry "cn=Manager,dc=acme.example.com"</p>

<p>adding new entry "ou=users,dc=acme.example.com"</p>

<p>[root@trinity phpldapadmin]#
```</p>

<p>Para comprobar que en efecto el schema se cargo correctamente, se utiliza el siguiente comando <code>ldapsearch -x -b 'dc=acme.example.com' '(objectclass=*)'</code>.</p>

<p>```sh
[root@trinity phpldapadmin]# ldapsearch -x -b
'dc=acme.example.com' '(objectclass=*)'</p>

<h1>extended LDIF</h1>

<p>#</p>

<h1>LDAPv3</h1>

<h1>base &lt;dc=acme.example.com> with scope subtree</h1>

<h1>filter: (objectclass=*)</h1>

<h1>requesting: ALL</h1>

<p>#</p>

<h1>acme.example.com</h1>

<p>dn: dc=acme.example.com
objectClass: dcObject
objectClass: organization
o: ACME LDAP Server
dc: acme.example.com</p>

<h1>Manager, acme.example.com</h1>

<p>dn: cn=Manager,dc=acme.example.com
objectClass: organizationalRole
cn: Manager</p>

<h1>users, acme.example.com</h1>

<p>dn: ou=users,dc=acme.example.com
ou: users
objectClass: top
objectClass: organizationalUnit</p>

<h1>search result</h1>

<p>search: 2
result: 0 Success</p>

<h1>numResponses: 4</h1>

<h1>numEntries: 3</h1>

<p>[root@trinity phpldapadmin]#
```</p>

<h2>phpldapadmin</h2>

<p>Para administrar el directorio se utiliza el <a href="http://phpldapadmin.sourceforge.net/">phpldapadmin</a>. Una herramienta web, similar al phpmyadmin (como su nombre ya lo indica ;).</p>

<p>No esta en los repositorios de CentOS. Como es una aplicación, sirve por igual si la tomamos de los repos de Fedora (<a href="http://dl.fedoraproject.org/pub/epel/5/i386/repoview/phpldapadmin.html">aca</a> y <a href="http://dl.fedoraproject.org/pub/epel/5/i386/phpldapadmin-1.0.2-1.el5.noarch.rpm">aca</a>).</p>

<p>Se descarga y se instala.</p>

<p><code>sh
wget http://dl.fedoraproject.org/pub/epel/5/i386/phpldapadmin-1.0.2-1.el5.noarch.rpm
yum install php php-ldap
rpm -ivh   phpldapadmin-1.0.2-1.el5.noarch.rpm
yum install openldap-clients openldap-devel
</code></p>

<p>Para su configuración, editar el archivo /etc/phpldapadmin/config.php con los siguientes valores:</p>

<p><code>php /etc/phpldapadmin/config.php
$ldapservers-&gt;SetValue($i,'server','name','Local LDAP Server');
$ldapservers-&gt;SetValue($i,'server','host','127.0.0.1');
$ldapservers-&gt;SetValue($i,'server','base',array('dc=acme.example.com'));
$ldapservers-&gt;SetValue($i,'server','auth_type','session');
$ldapservers-&gt;SetValue($i,'login','dn','cn=root,dc=acme.example.com');
$ldapservers-&gt;SetValue($i,'login','attr','dn');
</code></p>

<p>Ya se puede administrar el directorio en la url: <a href="http://acme.example.com/ldapadmin-">http://acme.example.com/ldapadmin/</a>.</p>

<p>Como referencia adicional se recomienda esta <a href="http://ihazem.wordpress.com/2011/11/29/installing-and-configuring-openldap-on-centos-5/">guia</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[creating an rpm package from on tgz file]]></title>
    <link href="http://devops-ar.github.com/blog/2011/12/17/creating-an-rpm-package-from-on-a-tgz-file/"/>
    <updated>2011-12-17T15:26:00-03:00</updated>
    <id>http://devops-ar.github.com/blog/2011/12/17/creating-an-rpm-package-from-on-a-tgz-file</id>
    <content type="html"><![CDATA[<p><em>disclaimer: this is only for creating an rpm for installing a set of files, no compiling, just a bunch of file being copied into a server.</em></p>

<p>Starting from a tgz file, an rpm package will be created. Sometimes, a tgz file is quicker/easier to use. However, in the long run, sticking to a package management system for handling the installation of applications on a system will pay off for sure.</p>

<p>Creating an rpm package from a tgz file isn't that hard as it's shown below.</p>

<h3>setting up rpm build environment</h3>

<p>Let's start by setting a dev environment, also, setting some variables which will be handly at the rpm creation process.</p>

<p><code>sh
sudo yum install rpm-build
mkdir -p ~/rpm/{BUILD,RPMS,SOURCES,SRPMS,SPECS,tmp}
mkdir ~/rpm/RPMS/{i386,i586,i686,noarch}
echo '%packager Osvaldo &lt;osvaldo@devops.com.ar&gt;' &gt;
~/.rpmmacros
echo '%_topdir %(echo $HOME)/rpm' &gt;&gt; ~/.rpmmacros
echo '%_tmppath %(echo $HOME)/rpm/tmp' &gt;&gt; ~/.rpmmacros
echo "%_query_all_fmt %%{name}-%%{version}-%%{release}.%%{arch}" &gt;&gt;
~/.rpmmacros
</code></p>

<p>Since we're be creating an rpm file just for installing a set of already existing files, it will only be needed three steps.</p>

<ol>
<li>First to place all of the files to be included on the rpm file under a directory in the BUILD directory.</li>
<li>Second, to create the spec file</li>
<li>and last, to execute the rpmbuild command.</li>
</ol>


<h3>using yum commands</h3>

<p>Here, commands are shown for how to search for the file and to install the package.</p>

<p>```
-bash-3.2$ yum search glassfish
Loaded plugins: downloadonly, fastestmirror
================= Matched: glassfish =================
glassfish-loadbalancer.i386 : Sun GlassFish Enterprise Server Load Balancing Plugin
-bash-3.2$</p>

<p>-bash-3.2$ sudo yum install glassfish-loadbalancer
Loaded plugins: downloadonly, fastestmirror
Loading mirror speeds from cached hostfile
* base: mirror.cogentco.com
* epel: mirror.hiwaay.net
* extras: mirror.flhsi.com
* updates: mirrors.igsobe.com
Setting up Install Process
Package glassfish-loadbalancer-2.1.1-r2.i386 already installed and
latest version
Nothing to do
-bash-3.2$
-bash-3.2$ rpm -qa | grep glassfish
glassfish-loadbalancer-2.1.1-r2.i386
-bash-3.2$
```
Actually, the package had been already installed, the process remains the same ;).</p>

<p>Now, instead of wondering how certain file came from, those belonging to this package will be fully identified and accesible (and controllable) via the package management system. For example, now we list exactly which files were installed by that rpm file (try that with a tgz file ... asumming you delete it, well, it wasn't needed any more, right? ;)</p>

<p><code>sh
-bash-3.2$ rpm -ql glassfish-loadbalancer
/opt/webserver7/lib/libicudata.so.2
/opt/webserver7/lib/libicui18n.so.2
/opt/webserver7/lib/libicuuc.so.2
/opt/webserver7/lib/libxerces-c.so
/opt/webserver7/plugins/lbplugin/bin/libpassthrough.so
/opt/webserver7/plugins/lbplugin/errorpages/default-error.html
/opt/webserver7/plugins/lbplugin/errorpages/sun-http-lberror.html
/opt/webserver7/plugins/lbplugin/resource/LBPluginDefault_root.res
/opt/webserver7/plugins/lbplugin/resource/LBPlugin_root.res
-bash-3.2$
</code></p>

<p>Where that file came from? Just use <code>rpm -qf <filename with full path></code> and you'll have the answer (again, try that on an file that came from a tgz file, ah, which tgz file btw ;).</p>

<h3>extracting the files from the rpm package</h3>

<p>Just in case someone needs the tgz file, here's how to convert the rpm file into a tgz file (pretty easy this way around ;) and extract it to the final destination as it had been installed using the tgz file.</p>

<p><code>sh
rpm2cpio glassfish-loadbalancer-2.1.1-r1.i386.rpm | cpio -idmv
tar zcf glassfish-loadbalancer-2.1.1-r1.tgz opt/
</code></p>

<h3>Notes</h3>

<p>First time the rpm file was created, during installation the following error showed up:</p>

<p>```sh
[root@cpweb1 i386]# rpm -i loadbalancer-2.2-1.i386.rpm
error: Failed dependencies:</p>

<pre><code>   libns-httpd40.so is needed by loadbalancer-2.2-1.i386
</code></pre>

<p>[root@cpweb1 i386]#
```</p>

<p>Interesting thing to know about rpm file creation is, there's an automatic dependency resolution process being handled automatically by the package management system. When you first create the rpm file, the included files are checked for dependencies, which are then, declared on the metadata of the rpm file. Then, at installation time, those dependencies are checked and if not already fullfilled, a warning message will show up (like it happened on this case). Usually, this wouldn't be a problem, since that  dependency would had been already provided by another installed package or, the yum command will find out which package would satisfy the dependency and suggest to install it. Sadly enough, we were dealing with a mixed scenario, one where manual installation were being done at the same time. This particular dependency had been already been satisfied because of a manually installed package. So the real issue at this point was how to force the package management system into doing something he was created
to avoid in the first place.</p>

<p>Exceptions, while rare, do exists. And good systems are prepared to deal with such situations. <strong>The AutoReqProv</strong> tag is used to control the automatic dependency processing performed when the package is being built. To disable automatic dependency processing, add the following line to the spec file:</p>

<p><code>
AutoReqProv: no
</code></p>

<h3>Files</h3>

<p>In order to automate things (we're supposed to be lazy, right? ;) I use ol' make command, so the following Makefile make my life easier. I do rpm work on my workstation, then, upload the new packages to the repo server. So, What it takes?: <code>make all</code>.</p>

<p>```make Makefile
all:</p>

<pre><code>   rpmbuild -ba glassfish-loadbalancer-2.1.1.spec
   sudo cp ../RPMS/i386/glassfish-loadbalancer-2.1.1-r*.i386.rpm /var/www/repo/i386
   sudo createrepo /var/www/repo/i386
   scp ../RPMS/i386/glassfish-loadbalancer-2.1.1-r*.i386.rpm repo.example.com:/var/www/html/centos/5/netsol/i386
   ssh repo.example.com createrepo /var/www/html/centos/5/netsol/i386/
   ssh repo.example.com createrepo /var/www/html/centos/5/netsol/i686/
</code></pre>

<p>```</p>

<p>The spec file used to create the rpm file.</p>

<p>```yaml glassfish-loadbalancer-2.1.1.spec
%define name    glassfish-loadbalancer
%define version 2.1.1
%define release r2</p>

<p>Summary: Sun GlassFish Enterprise Server Load Balancing Plugin
Name: %{name}
Version: %{version}
Release: %{release}</p>

<h1>Copyright: GPL</h1>

<p>Group: ACME/Networking/Daemons
BuildArch: i386</p>

<h1>BuildRoot: %{_builddir}/%{name}-%{version}-%{release}</h1>

<p>BuildRoot: %{_builddir}/%{name}-%{version}
URL: http://www.oracle.com/
Distribution: whatever
Vendor: Oracle
Packager: %{packager}
Provides: Load Balancer Plugin</p>

<h1>Requires:</h1>

<p>AutoReqProv: no
License: Restricted</p>

<p>%description
This package contains the  Sun GlassFish Enterprise Server Load
Balancing Plugin.</p>

<p>%prep
exit 0</p>

<p>%build
exit 0</p>

<p>%install
exit 0</p>

<p>%clean
exit 0</p>

<p>%files
%defattr(-,root,root)
/opt/webserver7/plugins/lbplugin/bin/libpassthrough.so
/opt/webserver7/plugins/lbplugin/errorpages/default-error.html
/opt/webserver7/plugins/lbplugin/errorpages/sun-http-lberror.html
/opt/webserver7/plugins/lbplugin/resource/LBPluginDefault_root.res
/opt/webserver7/plugins/lbplugin/resource/LBPlugin_root.res
/opt/webserver7/lib/libicudata.so.2
/opt/webserver7/lib/libicui18n.so.2
/opt/webserver7/lib/libicuuc.so.2
/opt/webserver7/lib/libxerces-c.so
```</p>

<p>testing with differente spec values</p>

<p>```diff diff loadbalancer-2.2.1.spec glassfish-loadbalancer-2.1.1.spec
1,3c1,3
&lt; %define       name    loadbalancer
&lt; %define version       2.2</p>

<h2>&lt; %define release       1</h2>

<blockquote><p>%define       name    glassfish-loadbalancer
%define version       2.1.1
%define release       r2
10c10</p>

<h2>&lt; Group: Amusements/Graphics</h2>

<p>Group: Netsol/Networking/Daemons
12c12,13</p>

<h2>&lt; BuildRoot: %{_builddir}/%{name}-%{version}.%{release}</h2>

<h1>BuildRoot: %{_builddir}/%{name}-%{version}-%{release}</h1>

<p>BuildRoot: %{_builddir}/%{name}-%{version}
18a20
AutoReqProv: no
-bash-3.2$
```</p></blockquote>

<p>the final directory tree (including trash = i mean, dev files, no time for cleaning it up)</p>

<p><code>``sh
|-- BUILD
|  </code>-- glassfish-loadbalancer-2.1.1
|       <code>-- opt
|          </code>-- webserver7
|               |-- lib
|               |   |-- libicudata.so.2
|               |   |-- libicui18n.so.2
|               |   |-- libicuuc.so.2
|               |   <code>-- libxerces-c.so
|              </code>-- plugins
|                   <code>-- lbplugin
|                       |-- bin
|                       |  </code>-- libpassthrough.so
|                       |-- errorpages
|                       |   |-- default-error.html
|                       |   <code>-- sun-http-lberror.html
|                      </code>-- resource
|                           |-- LBPluginDefault_root.res
|                           <code>-- LBPlugin_root.res
|-- RPMS
|   |-- i386
|   |   |-- glassfish-2.1.1-loadbalancer-2.1-1.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1-1.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1.1-r0.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1.1-r1.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1.1-r2.i386.rpm
|   |  </code>-- loadbalancer-2.2-1.i386.rpm
|   |-- i586
|   |-- i686|-- BUILD
|   <code>-- glassfish-loadbalancer-2.1.1
|      </code>-- opt
|           <code>-- webserver7
|               |-- lib
|               |   |-- libicudata.so.2
|               |   |-- libicui18n.so.2
|               |   |-- libicuuc.so.2
|               |  </code>-- libxerces-c.so
|               <code>-- plugins
|                  </code>-- lbplugin
|                       |-- bin
|                       |   <code>-- libpassthrough.so
|                       |-- errorpages
|                       |   |-- default-error.html
|                       |  </code>-- sun-http-lberror.html
|                       <code>-- resource
|                           |-- LBPluginDefault_root.res
|                          </code>-- LBPlugin_root.res
|-- RPMS
|   |-- i386
|   |   |-- glassfish-2.1.1-loadbalancer-2.1-1.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1-1.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1.1-r0.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1.1-r1.i386.rpm
|   |   |-- glassfish-loadbalancer-2.1.1-r2.i386.rpm
|   |   <code>-- loadbalancer-2.2-1.i386.rpm
|   |-- i586
|   |-- i686
|  </code>-- noarch
|-- SOURCES
|-- SPECS
|   |-- Makefile
|   |-- glassfish-loadbalancer-2.1.1.spec
|   <code>-- loadbalancer-2.2.1.spec
|-- SRPMS
|   |-- glassfish-2.1.1-loadbalancer-2.1-1.src.rpm
|   |-- glassfish-loadbalancer-2.1-1.src.rpm
|   |-- glassfish-loadbalancer-2.1.1-r0.src.rpm
|   |-- glassfish-loadbalancer-2.1.1-r1.src.rpm
|   |-- glassfish-loadbalancer-2.1.1-r2.src.rpm
|  </code>-- loadbalancer-2.2-1.src.rpm
`-- tmp</p>

<p>19 directories, 24 files</p>

<p>```</p>

<h3>Some handy links</h3>

<ul>
<li><a href="http://www.lamolabs.org/blog/164/centos-rpm-tutorial-1/">http://www.lamolabs.org/blog/164/centos-rpm-tutorial-1/</a></li>
<li><a href="http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment">http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment</a></li>
<li><a href="http://wiki.centos.org/TipsAndTricks/YumAndRPM">http://wiki.centos.org/TipsAndTricks/YumAndRPM</a></li>
<li><a href="http://ramblings.narrabilis.com/wp/creating-a-yum-repository-repo-and-creating-a-yum-group-to-install-kickstart/">http://ramblings.narrabilis.com/wp/creating-a-yum-repository-repo-and-creating-a-yum-group-to-install-kickstart/</a></li>
<li><a href="http://www.tim-riemenschneider.de/linux/rpmbook/node310.html">http://www.tim-riemenschneider.de/linux/rpmbook/node310.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
