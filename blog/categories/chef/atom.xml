<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | devops-ar]]></title>
  <link href="http://www.devops.com.ar/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://www.devops.com.ar/"/>
  <updated>2012-08-27T23:02:40-03:00</updated>
  <id>http://www.devops.com.ar/</id>
  <author>
    <name><![CDATA[osvaldo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sendmail cookbook]]></title>
    <link href="http://www.devops.com.ar/blog/2012/05/19/sendmail-cookbook/"/>
    <updated>2012-05-19T14:02:00-03:00</updated>
    <id>http://www.devops.com.ar/blog/2012/05/19/sendmail-cookbook</id>
    <content type="html"><![CDATA[<p>Postfix se ha convertido en el MTA por excelencia para la mayoría de las distribuciones Linux. Sin embargo, algunas, como CentOS (hasta la 5 al menos) instalan sendmail de manera predeterminada. A menos que estemos instalando un servidor de mensajeria, utilizar sendmail sería la mejor opción. Es sencillo de configurar, ya esta instalado y para el uso que le vamos a dar, cumple su cometido.</p>

<p>Para cubrir la parte de configuración y ahorrarnos ese paso, se armo un cookbook que solo contiene tres archivos.</p>

<p>Lo primero que hacemos es crear un archivo de atributos donde se define el smarthost que se este utilizando. Como todo atributo, puede ser modificado luego a nivel de role o de ambiente (environment), incluso, a nivel de node mediante el uso de un data bag.</p>

<p><code>rb cookbooks/sendmail/attributes/default.rb
default["sendmail"]["smarthost"] = "mail-gateway.acme.com"
</code></p>

<p>Sendmail maneja sus archivos de configuración a través de macros m4. Nunca se editan los archivos .cf tal como se aclaran en los mismos:</p>

<p>```sh sendmail.cf line 25</p>

<h5>DO NOT EDIT THIS FILE!  Only edit the source .mc file.</h5>

<p>```</p>

<p>El archivo de template de sendmail.mc es una copia del archivo original, solo se adiciona la linea de definición del smarthost utilizando el atributo antes definido.</p>

<p><code>rb cookbooks/sendmail/templates/default/sendmail.mc.erb
define(`SMART_HOST', `&lt;%= node['sendmail']['smarthost'] %&gt;')dnl
</code></p>

<p>El tercer archivo es la receta como tal.</p>

<p>```rb cookbooks/sendmail/recipes/default.rb
package "m4"
package "sendmail"
package "sendmail-cf"</p>

<p>service 'sendmail'</p>

<p>template "/etc/mail/sendmail.mc" do
  source "sendmail.mc.erb"
  mode 0644
  owner "root"
  group "root"
  notifies :run, "execute[create_sendmailcf_file]", :immediately
  notifies :restart, "service[sendmail]"
end</p>

<p>execute "create_sendmailcf_file" do
  command "/usr/bin/m4 /etc/mail/sendmail.mc > /etc/mail/sendmail.cf"
  action :nothing
end
```</p>

<p>Las tres primeras lineas se aseguran de que los paquetes requeridos se encuentren instalados en el sistema.</p>

<p>La declaración del servicio <code>sendmail</code> se encarga de configurarlo para que inicie de manera automática y poder enviarle notificaciones desde otras partes de la receta.</p>

<p>Se crea el archivo de configuración del sendmail: sendmail.mc a partir del template. En el caso de que ya existiera no se hace mas nada. Para los casos en que se crea o fue modificado, se ejecuta de manera inmediata el comando de creación del archivo sendmail.cf y se declara que el servicio de sendmail sea reiniciado, para tomar los cambios aplicados, una vez que el chef haya terminado de aplicar todas las recetas.</p>

<p>El comando <code>create_sendmailcf_file</code> no hace nada de manera predeterminada. Solo se ejecuta en caso de modificación del template del archivo de configuración del sendmail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[empezando con chef]]></title>
    <link href="http://www.devops.com.ar/blog/2012/02/03/empezando-con-chef/"/>
    <updated>2012-02-03T02:20:00-03:00</updated>
    <id>http://www.devops.com.ar/blog/2012/02/03/empezando-con-chef</id>
    <content type="html"><![CDATA[<h1>Componentes de una instalación de Chef</h1>

<p>Una instalación de Chef va a contar típicamente con tres componentes.</p>

<ul>
<li><strong>Chef Server</strong> Es el host donde esta la base de datos de los nodes registrados, los certificados de las credenciales de los mismos y los cookbooks.</li>
<li><strong>Chef Client</strong> Es el node gestionado a través del Chef Server. Una vez hecho el bootstraping, cada vez que se ejecute el cliente de chef (comando chef-client) se conecta al Chef Server, descarga y aplica la configuración establecida por las recetas, roles y environments que tenga asignado.</li>
<li><strong>Workstation</strong> Puede o no ser un node de chef, pero si va tener las credenciales de un usuario registrado con el Chef Server. Desde este equipo se ejecutan comandos de knife y se trabajan con los cookbooks.</li>
</ul>


<h1>Bootstraping</h1>

<p>La instalación de chef en un host (node) para que pueda ser gestionado por un chef server se llama bootstraping. Se realiza con el comando <a href="http://wiki.opscode.com/display/chef/Knife">knife</a> y el subcomando <a href="http://wiki.opscode.com/display/chef/Knife+Bootstrap">bootstrap</a>.</p>

<p>Por ejemplo:</p>

<p><code>sh
knife bootstrap 10.24.2.51 -x osvaldo --sudo  -N unixtools.tx.corp.acme.com -r 'role[demo]' -d rhel5-demo
</code></p>

<p>Con ese comando, se esta ejecutando el comando knife, el subcomando bootstrap, la dirección IP del server que se le va a hacer el bootstrap y los parámetros, que entonces, serán del subcomando.</p>

<pre><code>--sudo:
    El bootstrap se ejecuta via sudo.
-x, --ssh-user USERNAME:
    El username (nombre de usuario) con el que se realiza la conexión ssh.
-N, --node-name NAME:
    El nombre con el que el host va a ser registrado (como un node) en el server Chef. Usamos el fqdn (el node name tiene que ser único).
-r, --run-list RUN_LIST:
    Un listado separado por comas de los roles o recetas que se van a aplicar en el momento del bootstrapping.
-d, --distro DISTRO:
    El template que se va a utilizar para el bootstrap.
</code></pre>

<p>El bootstraping se debe realizar desde la workstation. Los templates del bootstrap son scripts en ruby pero con codigo en bash y se colocan en alguna de las locaciones predeterminadas.</p>

<p><code>sh  tree ~/chef-repo/.chef
|-- bootstrap
|   `-- glb-rhel5.erb
|-- knife.rb
|-- osvaldo.pem
`-- validation.pem
</code></p>

<p>Una locación común seria ~/chef-repo/.chef. En esta carpeta tenemos:</p>

<ul>
<li><strong>validation.pem</strong>: Es el certificado que utilizan los nodes para validarse ante el Chef Server</li>
<li><strong>osvaldo.pem</strong>: Certificado del cliente. Lo utiliza el operador para trabajar desde ese host como workstation.</li>
<li><strong>knife.rb</strong>: Archivo de configuración del comando knife.</li>
<li><strong>bootstrap</strong>: Directorio donde se almacenan los templates para el bootstrap.</li>
<li><strong>glb-rhel5.rb</strong>: Template para la instalación de un servidor RedHat (CentOS) de ACME.</li>
</ul>


<p>```rb bootstrap/glb-rhel5.erb
bash -c '</p>

<p>echo &lt;%= @config[:chef_node_name] %> > /tmp/chef_node_name</p>

<p>PROPERHOSTNAME=<code>cat /tmp/chef_node_name | cut -d. -f1</code>
PROPERDNSDOMAINNAME=<code>cat /tmp/chef_node_name | sed s/^$PROPERHOSTNAME.//</code></p>

<p>IPV4ADDR=<code>/sbin/ip addr | grep eth0 | grep "inet " | cut -d " " -f 6 | cut -d \/ -f 1</code></p>

<p>cp /etc/hosts /etc/hosts.chef-bck</p>

<p>NETCONF="/etc/sysconfig/network"
grep "<sup>HOSTNAME=${PROPERHOSTNAME}$"</sup> ${NETCONF} || ( sed -i s/<sup>HOSTNAME.*$//</sup> ${NETCONF} &amp;&amp; echo "HOSTNAME=${PROPERHOSTNAME}" >> ${NETCONF})</p>

<p>(
cat &lt;<EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
${IPV4ADDR} ${PROPERHOSTNAME}.${PROPERDNSDOMAINNAME} ${PROPERHOSTNAME}
EOF
) > /etc/hosts</p>

<p>hostname $PROPERHOSTNAME</p>

<p>if [ ! -d /usr/local/rvm ]; then</p>

<pre><code>wget http://192.168.20.50/rvm-chef-0.10.4-r0.noarch.rpm -P /tmp
rpm -ivh /tmp/rvm-chef-0.10.4-r0.noarch.rpm
</code></pre>

<p>fi</p>

<p>(
cat &lt;&lt;'EOP'
[[ -s "/usr/local/rvm/scripts/rvm" ]] &amp;&amp; . "/usr/local/rvm/scripts/rvm"
EOP
) >> .bashrc
[[ -s "/usr/local/rvm/scripts/rvm" ]] &amp;&amp; . "/usr/local/rvm/scripts/rvm"
rvm use --default ruby-1.9.2</p>

<p>mkdir -p /etc/chef</p>

<p>(
cat &lt;&lt;'EOP'
&lt;%= validation_key %>
EOP
) > /tmp/validation.pem
awk NF /tmp/validation.pem > /etc/chef/validation.pem
rm /tmp/validation.pem</p>

<p>(
cat &lt;&lt;'EOP'
&lt;%= config_content %>
EOP
) > /etc/chef/client.rb</p>

<p>(
cat &lt;&lt;'EOP'
&lt;%= { "run_list" => @run_list }.to_json %>
EOP
) > /etc/chef/first-boot.json</p>

<p>chef-client -j /etc/chef/first-boot.json'
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herramientas de Chef]]></title>
    <link href="http://www.devops.com.ar/blog/2011/12/17/chef-tools/"/>
    <updated>2011-12-17T14:07:00-03:00</updated>
    <id>http://www.devops.com.ar/blog/2011/12/17/chef-tools</id>
    <content type="html"><![CDATA[<p>Este artículo se puede visualizar en formato de presentación <a href="/talks/chef/chef-tools.html">aquí</a>.</p>

<h2><a href="http://wiki.opscode.com/display/chef/Ohai">ohai</a></h2>

<p>Ohai detecta información acerca del sistema operativo. Puede ser utilizado como un comando independiente pero su función primaria consiste en proveer información sobre el Nodo a Chef.
Cuando se ejecuta, recolecta información detallada y extensible acerca del equipo sobre el esta corriendo, como por ejemplo, configuración de Chef, el hostname, el FQDN, la configuración de red, así como datos sobre la memoria, la CPU, la plataforma y el kernel.</p>

<p>Cuando se ejecuta independiente, Ohai imprime un bloque de datos en formato JSON con toda la información que puede obtener del sistema. Cuando se utiliza a través de Chef, ese bloque de datos JSON es enviado al servidor de Chef como atributos "automáticos" del Nodo para actualizar la información del mismo que pudiera existir previamente.</p>

<h2><a href="http://wiki.opscode.com/display/chef/Knife">knife</a></h2>

<p>Knife es una poderosa herramienta de linea de comandos (CLI) que forma parte de Chef.
Es utilizada por los administradores para interactuar con la API del Servidor de Chef y con el Repositorio local de Chef. Permite manipular los Nodos, Cookbooks, Roles, Databags, Ambientes, etc. Además, puede ser utilizada para la propia instalación de Chef en nuevos sistemas.</p>

<h2>Ohai</h2>

<p>```sh
osvaldo@vostro:~$ ohai
{
  "languages": {</p>

<pre><code>"perl": {
  "version": "5.10.1",
  "archname": "i486-linux-gnu-thread-multi"
},
"python": {
  "version": "2.6.6",
  "builddate": "Dec 27 2010, 00:02:40"
},
</code></pre>

<p>...
  "kernel": {</p>

<pre><code>"name": "Linux",
"release": "2.6.32-5-686",
"version": "#1 SMP Thu Nov 3 04:23:54 UTC 2011",
"machine": "i686",
</code></pre>

<p>...
  "lsb": {</p>

<pre><code>"id": "Debian",
"description": "Debian GNU/Linux 6.0.3 (squeeze)",
"release": "6.0.3",
"codename": "squeeze"
</code></pre>

<p>  },
  "platform": "debian",
  "platform_version": "6.0.3",
...
```</p>

<h2>Knife :: the killer app</h2>

<p>Que pasa si queremos obtener una mirada del estado de los servidores que pertenecen a un rol en particular?</p>

<p><strong>Sort by 5min load average</strong></p>

<p><code>sh
[osvaldo@coldplay ~]$ knife ssh -x otoja 'roles:demo'  'cat /proc/loadavg | awk "{print $2}"' | sort -n -k 2
nirvana.example.com 0.00 0.00 0.00 1/149 16941
stp.example.com 0.00 0.00 0.00 4/182 25165
soundgarden.example.com  0.40 0.10 0.03 1/179 485
</code></p>

<p><strong>Sort by uptime</strong></p>

<p><code>sh
[osvaldo@coldplay ~]$ knife ssh -x otoja 'roles:demo' 'uptime' | sort -n -k 4
nirvana.example.com  21:25:39 up 8 days,  6:30,  2 users,  load average: 0.00, 0.00, 0.00
soundgarden.example.com   21:24:04 up 8 days,  9:00,  1 user,  load average: 0.20, 0.08, 0.02
stp.example.com  21:25:39 up 33 days, 10:47,  2 users,  load average: 0.00, 0.00, 0.00
</code></p>

<p><strong>puedo hacer un tail a un archivo al mismo tiempo en todos los servidores con solo un comando?</strong></p>

<p><code>sh
knife ssh -x otoja 'roles:demo' 'sudo tail -f /var/log/messages'
</code>
y ahora a mirar la pantalla ...</p>

<p><strong>que servidores estan utilizando python 2.*?</strong></p>

<p><code>sh
[osvaldo@coldplay ~]$ knife exec -E "search(:node, 'languages_python_version:2.*'  ).each {|host|  puts host[:fqdn] + ' python version: ' + host[:languages][:python][:version] }"
soundgarden.example.com python version: 2.4.3
nirvana.example.com python version: 2.4.3
stp.example.com python version: 2.4.3
vostro python version: 2.6.6
</code></p>

<p><strong>cual es el estado de un servicio X (ntp en el ejemplo) en un grupo determinado de servidores (con el role demo)?</strong></p>

<p><code>
[osvaldo@coldplay ~]$ knife ssh -x otoja -m "`knife exec -E "search(:node, 'roles:demo').each {|host| puts host[:fqdn] }" | xargs`" '/etc/init.d/ntpd status'
stp.example.com ntpd is stopped
soundgarden.example.com  ntpd is stopped
nirvana.example.com ntpd is stopped
</code></p>

<p><strong>que servidores tienen instalado java version 1.*?</strong></p>

<p><code>sh
[osvaldo@coldplay ~]$ knife exec -E "search(:node, 'languages_java_version:1.*'  ).each {|host|  puts host[:fqdn] + ' java version: ' + host[:languages][:java][:version] }"
toja-lm java version: 1.6.0_18
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducción rápida a Chef]]></title>
    <link href="http://www.devops.com.ar/blog/2011/12/17/introduccion-rapida-a-chef/"/>
    <updated>2011-12-17T13:19:00-03:00</updated>
    <id>http://www.devops.com.ar/blog/2011/12/17/introduccion-rapida-a-chef</id>
    <content type="html"><![CDATA[<p>Este artículo se puede visualizar en formato de presentación <a href="/talks/chef/quick-intro.html">aquí</a>.</p>

<h3>Definir problema</h3>

<ul>
<li>crecimiento de la granja de servidores</li>
<li>configuración manual</li>
<li>a mayor numero de servidores, mayor posibilidad de error cuando se utiliza la configuracion manual</li>
<li>baja productividad = pérdida de tiempo</li>
<li>El mantenimiento es reactivo en vez de ser proactivo</li>
<li>Cambios de emergencia pueden comprometer un sistema</li>
</ul>


<h3>Objetivo a lograr</h3>

<ul>
<li>permitir crecimiento horizontal</li>
<li>estar preparados para escalar sin mayores complicaciones</li>
<li>evitar los puntos únicos de falla</li>
<li>trabajo manual</li>
<li>conocimiento compartimentado</li>
<li>manejo sencillo de configuraciones complicadas</li>
</ul>


<h3>Beneficio de la solución</h3>

<ul>
<li>organización del trabajo</li>
<li>obliga a una separación de los entornos de trabajo</li>
<li>fuerza a evitar las excepciones</li>
<li>incremento de la productividad</li>
<li>documentación</li>
</ul>


<h3>Herramientas</h3>

<ul>
<li>opscode chef</li>
<li>chef-client/chef-server</li>
<li>hosted chef (propuesta comercial de opscode)</li>
<li>chef-solo</li>
<li>puppet</li>
<li>cfengine</li>
<li>otros ....</li>
</ul>


<h3>¿Cual es mejor?</h3>

<ul>
<li>puppet o chef</li>
<li>vi o emacs</li>
<li>ruby o python</li>
<li>linux o windows</li>
</ul>


<p>Con Puppet, un Cron Type sería algo asi:</p>

<p><code>rb Puppet Cron Type
cron { command:
  command =&gt; "/usr/local/sbin/command",
  hour =&gt; 2,
  minute =&gt; 0
}
</code></p>

<p>Con Chef, declarar un Recurso equivalente seria:</p>

<p><code>rb chef resource
cron "describe your job" do
  hour "2"
  minute "0"
  command "/usr/local/sbin/command"
end
</code></p>

<h3>modos de trabajo</h3>

<ul>
<li>chef-solo</li>
<li>chef-server</li>
<li>hosted chef</li>
</ul>


<h3>instalación rapida en 3 pasos</h3>

<ul>
<li>instalar ruby</li>
<li>depende del sistema operativo</li>
<li>instalar chef: sudo gem install chef</li>
<li>no hay tercer paso ;)</li>
</ul>


<h3>¿Qué es una receta?</h3>

<ul>
<li>con solo dos archivos ya armamos una receta</li>
<li>en realidad con uno basta (se puede excluir la metadata)</li>
</ul>


<p><code>sh
foo/recipes/default.rb
foo/metadata.rb
</code></p>

<h3>ejemplo de una receta para PHP</h3>

<p>```rb default.rb
Chef::Log.debug("Running php recipe)</p>

<p>package "php5-cgi"
package "php5-cli"
package "php5-mysql"
package "php5-curl"
package "php5-dev"</p>

<p>include_recipe "php::pear"
```</p>

<h3>ejemplo de una receta para PHP</h3>

<p>```rb pear.rb
Chef::Log.debug("Running pear recipe")</p>

<p>package "php-pear"</p>

<p>execute "Update PEAR and all packages" do
  command "pear upgrade-all"
end</p>

<p>execute "Install HTTP_Session2 &amp; Net_CheckIP2" do
  command "pear install HTTP_Session2-beta Net_CheckIP-1.0.0RC3"
  not_if "test -f /usr/share/php/pear/HTTP/Session2.php"
end
```</p>

<h3>ejemplo de una receta para PHP</h3>

<p>```rb metadata.rb
maintainer        "Till Klampeckel"
maintainer_email  "till@php.net"
license           "BSD License"
description       "Install PHP &amp; required dependencies."
version           "0.1"
recipe            "php::default", "Install and configure PHP"
recipe            "php::pear", "Install PEAR and packages"</p>

<p>supports 'ubuntu'
```</p>

<h3>ejemplo de una receta para PHP</h3>

<p>Estructura del directorio</p>

<p><code>sh
/tmp/chef/cookbooks/php/
/tmp/chef/cookbooks/php/metadata.rb
/tmp/chef/cookbooks/php/recipes/default.rb
/tmp/chef/cookbooks/php/recipes/pear.rb
</code></p>

<h3>ejemplo de una receta para PHP</h3>

<p>Utilizando el modo de trabajo Chef-solo</p>

<ul>
<li>Necesitamos dos archivo de configuración</li>
<li>/etc/chef/solo.rb</li>
<li>node.json</li>
<li>Un repositorio de cookbooks</li>
</ul>


<p><code>rb /etc/chef/solo.rb
file_cache_path "/tmp/chef"
cookbook_path "/tmp/chef/cookbooks"
</code></p>

<h3>ejemplo de una receta para PHP</h3>

<p>node.json</p>

<ul>
<li>JSON qué? la mujer de quién?</li>
<li>La lista de ejecución (run_list) define las recetas que van a ser utilizadas y el orden que son ejecutadas.</li>
</ul>


<p><code>js node.json
{
  "run_list": [ "recipe[php]" ]
}
</code></p>

<h3>Ser flexibles</h3>

<ul>
<li>Mantener las recetas genéricas</li>
<li>Configuración individual</li>
<li>Utilizar variables en node.json</li>
</ul>


<h3>ejemplo de node.json</h3>

<p><code>js node.json
{
  "php": { "memory":"18G", "tmp":"/tmp/php/data" },
  "run_list": ...
}
</code></p>

<p>uso de variables en foo.rb:</p>

<p>```rb foo.rb
memory = node[:php][:memory]
tempdir = node[:php][:tmp]</p>

<p>directory "#{tempdir}" do
  owner "www-data"
  group "www-data"
  recursive :true
  action :delete
end
```</p>

<h3>Ejecución</h3>

<p>Con el archivo node.json local en el servidor:</p>

<p><code>bash
chef-solo -j /tmp/node.json [-c /etc/chef/solo.rb]
</code>
El archivo node.json y las recetas se pueden descargar de un servidor remoto [master, Amazon S3,..]:</p>

<p><code>sh
chef-solo -j http://example.org/node.json -r http://example.org/recipes.tar.gz
</code></p>

<h2>Uso avanzado</h2>

<h3>Archivos</h3>

<ul>
<li>distribución de archivos de configuración</li>
<li>archivos estáticos - solo necesitan ser copiados tal cual</li>
</ul>


<p><code>rb openssh/files/default/banner
Ud. está ingresando a una red informática de Acceso Restringido y que contiene información
legalmente protegida, confidencial y/o de secreto profesional, cuyo uso indebido
puede generar al usuario responsabilidad civil o configurar los
delitos previstos en los arts. 153 a 157 del Código Penal.
</code></p>

<p>```rb openssh/recipes/default.rb</p>

<h1>asume openssh/files/default/banner</h1>

<p>template "banner" do
  source  "banner"
  owner   "root"
  group   "root"
  mode    "0644"
end
```</p>

<h3>Atributos</h3>

<ul>
<li>los atributos de un node son generados por ohai</li>
<li>pueden ser modificados ó adicionados en las recetas de los cookbooks, en los roles o los ambientes</li>
<li>ejemplo de atributos en una receta (openssh/attributes/default.rb):</li>
</ul>


<p>```rb openssh/attributes/default.rb
default[:openssh][:port]                = [ "22" ]
default[:openssh][:listen_address]      = [ "0.0.0.0" ]</p>

<p>default[:openssh][:permit_root_login]   = "no"
default[:openssh][:x11_forwarding]      = "no"</p>

<p>default[:openssh][:ignore_rhosts]      = "yes"
default[:openssh][:use_dns]      = "no"
default[:openssh][:banner]      = "/etc/ssh/banner"
<code>
- ejemplo de atributos en un ambiente
</code>rb roles/local.rb
name "local"
description "local testing environment"
override_attributes ({</p>

<pre><code>"ntp" =&gt; {
    "ntp_server" =&gt; "time.apple.com"
}
</code></pre>

<p>})
```</p>

<h3>Plantillas</h3>

<ul>
<li>Archivos de configuración</li>
<li>Scripts de inicio</li>
<li>uso de atributos en una plantilla (openssh/templates/centos/sshd_config.erb):</li>
</ul>


<p><code>rb openssh/templates/centos/sshd_config.erb
PermitRootLogin &lt;%= node[:openssh][:permit_root_login] %&gt;
IgnoreRhosts &lt;%= node[:openssh][:ignore_rhosts] %&gt;
X11Forwarding &lt;%= node[:openssh][:x11_forwarding] %&gt;
Banner  &lt;%= node[:openssh][:banner] %&gt;
</code></p>

<ul>
<li><p>uso de una plantilla en una receta (openssh/recipes/default.rb):
```rb openssh/recipes/default.rb
template "/etc/ssh/sshd_config" do
  source  "sshd_config.erb"
  owner   "root"
  group   "root"
  mode    "0600"</p>

<p>  notifies :restart, "service[sshd]"
end
```</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
