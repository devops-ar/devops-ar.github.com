<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | devops-ar]]></title>
  <link href="http://devops-ar.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://devops-ar.github.com/"/>
  <updated>2012-11-20T11:14:06-03:00</updated>
  <id>http://devops-ar.github.com/</id>
  <author>
    <name><![CDATA[osvaldo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[instalando servidores con un commit]]></title>
    <link href="http://devops-ar.github.com/blog/2012/11/20/instalando-servidores-con-un-commit/"/>
    <updated>2012-11-20T07:50:00-03:00</updated>
    <id>http://devops-ar.github.com/blog/2012/11/20/instalando-servidores-con-un-commit</id>
    <content type="html"><![CDATA[<h1>Introducción (aka TL;DR)</h1>

<p>Empece a usar chef para deployar los servers (vm) de desarrollo. Partiendo de la forma estandar de uso de chef, llegue al workflow que presento a continuacion.<br/>
Toda la informacion de un server se almacena en un archivo de texto. Configurar un server se reduce a editar el archivo correspondiente y comitear los cambios realizados. <br/>
El workflow se encarga del resto: ejecutar los comandos necesarios, notificar por IRC del estado de la operacion y dejar una traza disponible de los comandos ejecutados para su revision posterior (y/o auditoria/debug/etc).</p>

<h2>componentes de chef</h2>

<p>chef tiene tres componentes basicos:</p>

<ul>
<li>chef server</li>
<li>chef workstation</li>
<li>chef client</li>
</ul>


<p>El chef client (node) toma la configuracion del chef server y la aplica.<br/>
La chef workstation es la que instala el chef en los clientes (nodes) y en nuestro caso, invoca la ejecucion del chef client.<br/>
El chef server es donde esta toda la configuracion que se va a aplicar (los cookbooks con las recipes y las data bags). tambien se almacena la informacion de los nodes que son administrador por chef.</p>

<h2>infrastructure as code</h2>

<p>La configuracion que se aplica (cookbooks, databags) se puede guardar en un repositorio de codigo, se decidio utilizar git.  El chef server tiene una interface web, pero no se utiliza, toda la configuracion se hace en los archivos de repositorio y se importa al chef server (mediante el comando knife). De esta manera, todos los cambios estan versionados. Para servidor git se utiliza gitolite (como interface web se recomienda gitlab).</p>

<h1>Workflow</h1>

<p>Se armo un workflow siguiendo la filosofia unix, pequeños componentes que cumplen una tarea en especifico y que pueden ser concatenados para implementar una tarea compleja.<br/>
El sysadmin clona el repo en la estacion de trabajo que vaya a utilizar. Solo se requiere git instalado, su llave ssh publica (para crear el usuario en gitolite) y acceso por ssh al server git.<br/>
Trabaja con los archivos . Hace un commit para guardar los cambios realizados. Por ultimo, hace un push para actualizar el repositorio central.</p>

<p>El repositorio central esta en un gitolite. El gitolite corre bajo un usuario (git) sin privilegios.  <br/>
Se creo un hook <code>post-receive</code> que es el caballo de batalla de este workflow. Cada git push que se realiza contra el repositorio, ejecuta el script de ese hook. <br/>
El script chequea que fue lo que se actualizo y en base a eso toma la accion que corresponde.<br/>
El usuario git tiene configurado el comando knife para poder cargar cookbooks y databags en el chef server.<br/>
Si se actualizo un cookbook, un databag (ver nota siguiente), un role o un environment, se sube (knife upload) al chef server.</p>

<p>Para administrar los servidores se creo un databag: nodes, donde se crea un archivo json (<code>template.json</code>)  por cada servidor que se deployea.</p>

<p><div><script src='https://gist.github.com/4075735.js?file='></script>
<noscript><pre><code>#!/bin/sh

#TODO
# add error checking to knife operations

IRC_URL=&quot;http://irc.example.com/irc.php&quot;
RUNDECK_URL=&quot;https://rundeck.example.com/rundeck/&quot;
template_msg=&quot;modified template:&quot;
node_msg=&quot;modified node:&quot;
envr_msg=&quot;modified environment:&quot;
role_msg=&quot;modified role:&quot;
cookbook_msg=&quot;modified cookbook:&quot;
boot_msg=&quot;boot-node started in rundeck - progress: &quot;
run_msg=&quot;run-client started in rundeck - progres: &quot;
from=&quot;gitolite-chef-server&quot;


# Safety check
if [ -z &quot;$GIT_DIR&quot; ]; then
    echo &quot;Don't run this script from the command line.&quot; &gt;&amp;2
    exit 1
fi

tmpdir=/var/tmp/$$.$RANDOM
mkdir $tmpdir

read oldrev newrev refname
BRANCH=${refname#refs/heads/} 
files=`git diff-tree --stat --summary --find-copies-harder $oldrev..$newrev`
for i in $files
do
  case &quot;$i&quot; in
    data_bags/nodes/*)
      k=`echo $i | cut -f&quot;3&quot; -d&quot;/&quot;`
      j=`basename $k .json`
      if [ $j = &quot;template&quot; ]; then
                    curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${template_msg}' '${j}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
        exit 0
      fi
      git show HEAD:$i &gt; $tmpdir/$j.json
      knife data bag from file nodes $tmpdir/$j.json
      curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${node_msg}' '${j}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
      search=`knife node list | grep $j`
      STATUS=$?
      #STATUS=1
      if [ $STATUS -ne 0 ]; then
        # boostrap node
        IP=`sed -n '/eth0/{n; s/^.*target&quot;:&quot;\(.*\)&quot;.*/\1/p}' $tmpdir/$j.json`
        FQDN=`sed -n 's/^.*fqdn&quot;.*&quot;\(.*\)&quot;.*/\1/p' $tmpdir/$j.json`
        ENVIRONMENT=`sed -n 's/^.*environment&quot;.*&quot;\(.*\)&quot;.*/\1/p' $tmpdir/$j.json`
        #echo &quot;the ip: $IP and the env: $ENVIRONMENT&quot;
        out=`ssh chef@rundeck.example.com run -j &quot;boot-node&quot; -p chef-workstation -- -ip ${IP} -fqdn ${FQDN} -env ${ENVIRONMENT}`
        # the url changed from http://rundeck.example.com:4440/
        # to https://rundeck.example.com/rundeck/
        #url=`echo $out | sed 's/.*&lt;\(.*\)&gt;$/\1/'`
        url=`echo $out | sed 's/.*4440\/\(.*\)&gt;$/\1/'`
        url=$RUNDECK_URL$url
        curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${boot_msg}' '${url}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
        # run-client
        out=`ssh chef@rundeck.example.com run -j &quot;run-chef-client&quot; -p chef-workstation -- -fqdn ${FQDN}`
        url=`echo $out | sed 's/.*4440\/\(.*\)&gt;$/\1/'`
        url=$RUNDECK_URL$url
        curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${run_msg}' '${url}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
      else
        # run-client
        fqdn=`echo ${search} | xargs knife node show | head -n 1 | awk '{print $3}'`
        out=`ssh chef@rundeck.example.com run -j &quot;run-chef-client&quot; -p chef-workstation -- -fqdn $fqdn`
        url=`echo $out | sed 's/.*4440\/\(.*\)&gt;$/\1/'`
        url=$RUNDECK_URL$url
        curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${run_msg}' '${url}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
      fi
      ;;
    roles/*)
      k=`echo $i | cut -f&quot;2&quot; -d&quot;/&quot;`
      #knife data bag from file nodes $tmpdir/$j.json
      #curl  -X POST -d 'json={&quot;msg&quot;:&quot;se modifico el node: '${j}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  http://rundeck.example.com/irc.php
      #echo &quot;from roles!&quot;
      j=`basename $k .rb`
      git show HEAD:$i &gt; $tmpdir/$k
      knife role from file $tmpdir/$k
      curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${role_msg}' '${j}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
      ;;
    environments/*)
      k=`echo $i | cut -f&quot;2&quot; -d&quot;/&quot;`
      j=`basename $k .rb`
      git show HEAD:$i &gt; $tmpdir/$k
      knife environment from file $tmpdir/$k
      curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${envr_msg}' '${j}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
      ;;
    cookbooks/*)
      k=`echo $i | cut -f&quot;2&quot; -d&quot;/&quot;`
      #echo &quot;knife cookbook upload $k from $tmpdir&quot;
      GIT_WORK_TREE=$tmpdir git checkout -f
      cd $tmpdir
      knife cookbook upload $k
      curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${cookbook_msg}' '${k}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
      ;;
    */files/*)
      k=`echo $i | cut -f&quot;2&quot; -d&quot;/&quot;`
      curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${cookbook_msg}' '${k}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}' ${IRC_URL}
      ;;
    */templates/*)
      k=`echo $i | cut -f&quot;2&quot; -d&quot;/&quot;`
      curl  -X POST -d 'json={&quot;msg&quot;:&quot;'${cookbook_msg}' '${k}'&quot;,&quot;from&quot;:&quot;'${from}'&quot;}'  ${IRC_URL}
      ;;
    *)
      # Anything else (is there anything else?)
      #echo &quot;anything else ... $i&quot;
      #exit 1
      ;;
  esac
done
rm -fr $tmpdir
exit 0</code></pre></noscript></div>
</p>

<p>Si el hook detecta que se hizo el push de un node (ya sea porque se creo o porque se actualizo, hablamos del archivo json), se conecta al chef server y revisa si existe ese node.<br/>
Si no existe, le hace un bootstrap al node primero, le asigna el environment y ejecuta el comando chef-client. Si ya existia, directamente invoca el chef-client en el node para aplicar cualquiera fuera la nueva configuracion que se realizo.<br/>
Se crearon recipes que utilizan informacion de este archivo json para configurar el servidor.<br/>
En el archivo json del node se definen items como los usuarios que van a tener acceso por ssh al server o el listado de software que va a tener instalado. <br/>
Si se realizo la modificacion de un cookbook, el hook lo sube al chef-server. Idem para un role, environment u otro data bag que no sea nodes.  <br/>
El hook no tiene ningun acceso a los servidores (nodes). Cuando se requiere ejecutar una accion, lanza un job en una instancia de rundeck. Esta instancia seria el equivalente a la chef workstation.</p>

<h1>rundeck</h1>

<p>En un server con acceso a todas las vm por ssh (jumphost) se creo una cuenta de usuario (chef) sin privilegios. Se configuro el comando knife y la llave ssh privada para acceder a las vm. <br/>
Bajo esta cuenta se invoca una instancia de rundeck. En el rundeck se creo un proyecto con dos jobs: uno para el bootstraping de un node (instalar el cliente de chef) y otro para la ejecucion del chef-client. Se configuro el usuario git para que pudiera lanzar cualquiera de estos jobs por ssh con los argumentos necesarios.<br/>
Cuando el hook necesita ejecutar un comando en un node, crea el job correspondiente en el rundeck, notifica la url del job (el rundeck se la devuelve cuando crea el job) y termina su ejecucion.<br/>
El rundeck almacena las trazas de todo comando que ejecuta. Esto permite hacer un seguimiento en caso de ser necesario.</p>

<h1>Seguridad</h1>

<p>Toda modificación se hace via git, cada commit se guarda con las credenciales de la persona que lo realizó.<br/>
El dev/sysadmin solo requiere tener git instalado y acceso por ssh al repositorio (y tener una cuenta de usuarios con permisos para comitear).<br/>
El server de git no necesita ningun acceso a ningun server, solo la posibilidad de usar el knife para subir informaciones al chef server. Todo cambio queda registrado con el commit de quien lo hizo. El repo funciona bajo un usuario sin privilegios.<br/>
El server de rundeck tambien se ejecuta bajo un usuario sin privilegios. Solo recibe jobs desde el hook del commit.</p>

<h1>Auditoria</h1>

<p>El git mantiene un registro de todos los commits realizados.<br/>
El rundeck mantiene una traza de la ejecucion de todos los comandos realizados.</p>

<h1>IRC</h1>

<p>Para el irc se utiliza irccat como bot que mediante una pagina en php recibe el post y lo envia al irc server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[usando gitolite]]></title>
    <link href="http://devops-ar.github.com/blog/2012/03/25/usando-gitolite/"/>
    <updated>2012-03-25T03:04:00-03:00</updated>
    <id>http://devops-ar.github.com/blog/2012/03/25/usando-gitolite</id>
    <content type="html"><![CDATA[<p>Una de las ventajas de git es el trabajo en equipos. Como compartir el codigo seria la pregunta. Existen varias alternativas. Hay servicios que ofrecen hospedaje de repositorios para git como el propio github. Entre las opciones si queremos hospedar el repositorio en un servidor propio destacan las siguientes:</p>

<ul>
<li><a href="http://gitorious.org/">gitorious</a>. Es una aplicación Rails para la gestión de proyectos. Permite un manejo via web de los repositorios git. Similar a github en algunos aspectos.</li>
<li><a href="http://repo.or.cz/w/girocco.git/blob/HEAD:/README">girocco</a>. No tiene tantas funcionalidades como gitorious pero la instalación parece mas sencilla. Buena opción a considerar si se requiere una interface web para la administración del repositorio.</li>
<li><a href="https://github.com/tv42/gitosis">gitosis</a>. Permite el acceso a repositorios git via ssh, garantizando control de accesos por repositorio y sin requerir cuentas locales (shell accounts) en el servidor. Esta implementado en Python pero la ultima actualizacion del codigo fue hace 3 años.</li>
<li><a href="https://github.com/sitaramc/gitolite">gitolite</a>. Muy similar a gitosis, implementado en Perl. Se mantiene en desarrollo activo.</li>
</ul>


<p>Como una interface web para administrar usuarios y repositorios no era un requerimiento y gitosis no se mantiene activo, la elección fue gitolite.</p>

<!-- more -->


<p>La forma de trabajo de gitolite es sencilla pero con su propia lógica de funcionamiento. En el servidor donde se instala gitolite no se realiza ninguna configuración de usuarios y/o repositorios en absoluto. Cuando se termina la instalación de gitolite, se crea un repositorio llamado <code>gitolite-admin</code> (dos repositorios en realidad, el otro se llama <code>testing</code> y su objetivo es tal cual describe su nombre: pruebas).</p>

<p>La instalación de gitolite comienza creando una cuenta de usuario en el servidor. Puede ser gitolite (predeterminado si se instala de paquete .deb o .rpm) o git (el username que utilizamos en esta instalación). El acceso a los repositorios será en este caso via ssh. Gitolite utiliza autenticación para el ssh por llaves (públicas/privadas), por lo cual, para acceder a los repositorios, vamos a necesitar las llaves públicas de aquellos usuarios que se conecten a los repositorios.</p>

<p>Copiamos la llave pública de un primer usuario (osvaldo) y creamos el usuario de acceso a los repositorios. Como la instalación la realizamos en un server local, en vez del tradicional mecanismo para copiar llaves públicas que seria <code>ssh-copy-id</code>, logueados como root, se utiliza un simple <code>cp</code>.</p>

<p><code>sh
sudo su -
adduser git
cp /home/osvaldo/.ssh/id_rsa.pub /home/git/osvaldo.pub
chown git /home/git/*
</code></p>

<p>Se procede a la instalación de gitolite.</p>

<p><code>sh
su - git
git clone git://github.com/sitaramc/gitolite
cat &gt;&gt;~/.bashrc&lt;&lt;'EOF'
PATH=/home/git/bin:$PATH
EOF
. .bashrc
gitolite/src/gl-system-install
gl-setup -q ~/osvaldo.pub
</code></p>

<p>La instalación crea el repositorio donde se va a almacenar la configuración de gitolite. Hay dos subdirectorios de interes, <code>conf</code> donde se almacena el archivo de configuración: gitolite.conf y <code>keydir</code> donde se van a almacenar las llaves públicas de los usuarios que trabajen con los repositorios.</p>

<p><code>sh
git@vostro:~$ gitolite/src/gl-system-install
using default values for EUID=1002:
/home/git/bin, /home/git/share/gitolite/conf, /home/git/share/gitolite/hooks
git@vostro:~$
git@vostro:~$ gl-setup -q osvaldo.pub
creating gitolite-admin...
Initialized empty Git repository in /home/git/repositories/gitolite-admin.git/
creating testing...
Initialized empty Git repository in /home/git/repositories/testing.git/
[master (root-commit) 6aedb93] gl-setup -q osvaldo.pub
 2 files changed, 8 insertions(+), 0 deletions(-)
 create mode 100644 conf/gitolite.conf
 create mode 100644 keydir/osvaldo.pub
git@vostro:~$
</code></p>

<p>Los usuarios remotos no van a tener cuentas locales de shell. El acceso a los repositorios es a través del usuario bajo el cual se instalo gitolite (en este caso: git) y utilizando el comando git directamente. Sin embargo, existe un comando que se encuentra disponible a cualquier usuario: info. Este comando se ejecuta via ssh y permite conocer las versiones de gitolite y de git que se encuentran instaladas en el servidor asi como los repositorios  a los cuales el usuario tiene acceso. La lista de repositorios resulta especialmente útil cuando se tienen dudas sobre el nombre exacto con el que fue creado.</p>

<p>```sh
osvaldo@vostro:~$ ssh git@vostro info
hello osvaldo, this is gitolite v2.3-33-g233a33d running on git 1.7.2.5
the gitolite config gives you the following access:</p>

<pre><code> R   W  gitolite-admin
@R_ @W_ testing
</code></pre>

<p>osvaldo@vostro:~$
```</p>

<p>Para comenzar a trabajar, clonamos el repositorio de administración.</p>

<p><code>sh
osvaldo@vostro:~/src/gitolite/vostro$ git clone git@vostro:gitolite-admin
Cloning into gitolite-admin...
remote: Counting objects: 6, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 6 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (6/6), done.
osvaldo@vostro:~/src/gitolite/vostro$
</code></p>

<h2>Creando usuarios</h2>

<p>Para crear un usuario, adicionamos su llave pública al directorio keyring y comiteamos el repo.</p>

<p><code>sh
cp fernando.pub gitolite-admin/keyring
git add .
git commit -m "adding fernando's pub key"
git push
</code>
En la consola aparecería algo así.</p>

<p><code>sh
osvaldo@vostro:~/src/gitolite/vostro/gitolite-admin$ git commit -m "adding fernando's pub key"
[master dc4dfed] adding fernando's pub key
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 keydir/fernando.pub
osvaldo@vostro:~/src/gitolite/vostro/gitolite-admin$ git push
Counting objects: 6, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 860 bytes, done.
Total 4 (delta 0), reused 0 (delta 0)
remote:
remote:         ***** WARNING *****
remote:         the following users (pubkey files in parens) do not appear in any access rules:
remote: fernando(fernando.pub)
To git@vostro:gitolite-admin
   6aedb93..dc4dfed  master -&gt; master
osvaldo@vostro:~/src/gitolite/vostro/gitolite-admin$
</code></p>

<h2>Creando repos</h2>

<p>Para crear un repositorio se define en el archivo de configuración: conf/gitolite.conf y se le asignan permisos a los usuarios que corresponda. Al comitear el repo de administración, gitolite se encarga de crear el repositorio y luego queda clonarlo y comenzar a trabajar con el mismo.</p>

<p>A manera de ejemplo se van a crear dos repositorios. Uno llamado "publico" donde tengan acceso los dos desarrolladores y otro que se llamará "privado"  donde solo un desarrollador tendrá acceso.</p>

<p>```aconf
conf/gitolite.conf</p>

<p>repo    gitolite-admin</p>

<pre><code>    RW+     =   osvaldo
</code></pre>

<p>repo    testing</p>

<pre><code>    RW+     =   @all
</code></pre>

<p>repo    publico</p>

<pre><code>    RW+     =   osvaldo
    RW+     =   fernando
</code></pre>

<p>repo    privado</p>

<pre><code>    RW+     =   osvaldo
</code></pre>

<p>```</p>

<p><code>sh
vi conf/gitolite.conf
git add conf/gitolite.conf
git commit -m "probando visibilidad de repos"
git push
</code></p>

<p>En la consola se pueden ver las operaciones que realiza el gitolite.</p>

<p><code>sh
osvaldo@vostro:~/src/gitolite/vostro/gitolite-admin$ git push
Counting objects: 7, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 429 bytes, done.
Total 4 (delta 0), reused 0 (delta 0)
remote: creating privado...
remote: Initialized empty Git repository in /home/git/repositories/privado.git/
remote: creating publico...
remote: Initialized empty Git repository in /home/git/repositories/publico.git/
To git@vostro:gitolite-admin
   dc4dfed..ade026e  master -&gt; master
osvaldo@vostro:~/src/gitolite/vostro/gitolite-admin$
</code></p>

<p>Ahora, ambos desarrolladores pueden ejecutar el comando info, pero el resultado va a ser distinto en cada caso. El usuario Osvaldo puede tener acceso a todos los repositorios.</p>

<p>```sh Repositorios disponibles para Osvaldo
osvaldo@vostro:~/src/gitolite/vostro/gitolite-admin$ ssh git@vostro info
hello osvaldo, this is gitolite v2.3-33-g233a33d running on git 1.7.2.5
the gitolite config gives you the following access:</p>

<pre><code> R   W  gitolite-admin
 R   W  privado
 R   W  publico
@R_ @W_ testing
</code></pre>

<p>```</p>

<p>Se nota la ausencia del repositorio "privado" para el usuario Fernando.</p>

<p>```sh Repositorios disponibles para Fernando
fernando@vostro:~$ ssh git@vostro info
hello fernando, this is gitolite v2.3-33-g233a33d running on git 1.7.2.5
the gitolite config gives you the following access:</p>

<pre><code> R   W  publico
@R_ @W_ testing
</code></pre>

<p>fernando@vostro:~$
```</p>

<h2>Trabajando con los repos</h2>

<p>El trabajo con los repositorios es similar a cualquier otro. Lo primero es clonar el repo, se trabaja sobre el mismo y al final, se comitean los cambios al server (push)</p>

<p><code>sh
fernando@vostro:~/src$ git clone git@vostro:publico
Cloning into publico...
warning: You appear to have cloned an empty repository.
fernando@vostro:~/src$
</code></p>

<p>Es probable que el siguiente error aparezca la primera vez que se hace un <code>git push</code>:</p>

<p><code>
osvaldo@vostro:~/src/gitolite/vostro/publico$ git push
No refs in common and none specified; doing nothing.
Perhaps you should specify a branch such as 'master'.
fatal: The remote end hung up unexpectedly
error: failed to push some refs to 'git@vostro:publico'
</code></p>

<p>Tanto en la <a href="http://sitaramc.github.com/gitolite/nagp.html">wiki de gitolite</a> como en <a href="http://stackoverflow.com/questions/6529136/gitolite-default-remotes-for-new-repository">stackoverflow</a> se encuentra la respuesta. No es un problema de gitolite sino de git. El primer <code>git push</code> siempre requiere especificar la "branch" a la que le queremos hacer el commit (push), por esta razón, se debe ejecutar de la siguiente manera: <code>git push origin master</code>. La próxima vez, ya bastará con con <code>git push</code>.</p>

<p>La rutina normal seria crear un archivo, hacerle el commit y luego el push al repo.</p>

<p><code>sh
osvaldo@vostro:~/src/gitolite/vostro/publico$ vi README.md
osvaldo@vostro:~/src/gitolite/vostro/publico$ git add .
osvaldo@vostro:~/src/gitolite/vostro/publico$ git commit -m "adding readme file"
[master (root-commit) db7e57b] adding readme file
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 README.md
osvaldo@vostro:~/src/gitolite/vostro/publico$ git push origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 241 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@vostro:publico
 * [new branch]      master -&gt; master
osvaldo@vostro:~/src/gitolite/vostro/publico$
</code></p>

<p>Y si un colega edita  el archivo.</p>

<p>```
fernando@vostro:~/src/publico$ git commit -a
Aborting commit due to empty commit message.
fernando@vostro:~/src/publico$ git commit -am "editing readme file"
[master 535b69b] editing readme file
 1 files changed, 2 insertions(+), 0 deletions(-)
fernando@vostro:~/src/publico$ git log
commit 535b69b7b2ca9ab383e5b59eb0285a307056181c
Author: Fernando <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#102;&#x65;&#x72;&#110;&#x61;&#x6e;&#100;&#111;&#64;&#100;&#114;&#x75;&#112;&#98;&#108;&#117;&#101;&#46;&#x63;&#111;&#109;">&#x66;&#101;&#114;&#110;&#97;&#x6e;&#100;&#x6f;&#64;&#100;&#x72;&#x75;&#x70;&#98;&#108;&#x75;&#101;&#46;&#x63;&#x6f;&#x6d;</a>
Date:   Sun Mar 25 02:54:03 2012 -0300</p>

<pre><code>editing readme file
</code></pre>

<p>commit db7e57b4cf414ff6a493941e5915f106548981eb
Author: Osvaldo T. Suarez <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#111;&#x74;&#x73;&#x75;&#97;&#114;&#x65;&#122;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#x6f;&#x74;&#115;&#117;&#97;&#x72;&#x65;&#x7a;&#64;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a>
Date:   Sun Mar 25 02:51:48 2012 -0300</p>

<pre><code>adding readme file
</code></pre>

<p>fernando@vostro:~/src/publico$ git push
Counting objects: 5, done.
Writing objects: 100% (3/3), 278 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@vostro:publico
   db7e57b..535b69b  master -> master
fernando@vostro:~/src/publico$
```</p>

<p>Con solo ejecutar un <code>git pull</code> vamos a mantener nuestro repositorio actualizado como debe ser.</p>

<p>```sh
osvaldo@vostro:~/src/gitolite/vostro/publico$ git  pull
Updating db7e57b..535b69b
Fast-forward
 README.md |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)
osvaldo@vostro:~/src/gitolite/vostro/publico$ git log
commit 535b69b7b2ca9ab383e5b59eb0285a307056181c
Author: Fernando <a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x66;&#101;&#x72;&#x6e;&#x61;&#x6e;&#100;&#111;&#64;&#x64;&#x72;&#x75;&#112;&#98;&#108;&#117;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x66;&#x65;&#x72;&#110;&#97;&#x6e;&#100;&#x6f;&#64;&#100;&#114;&#117;&#x70;&#98;&#x6c;&#x75;&#101;&#x2e;&#x63;&#x6f;&#109;</a>
Date:   Sun Mar 25 02:54:03 2012 -0300</p>

<pre><code>editing readme file
</code></pre>

<p>commit db7e57b4cf414ff6a493941e5915f106548981eb
Author: Osvaldo T. Suarez <a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#111;&#x74;&#115;&#117;&#97;&#114;&#101;&#122;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#111;&#116;&#x73;&#x75;&#97;&#114;&#101;&#x7a;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>
Date:   Sun Mar 25 02:51:48 2012 -0300</p>

<pre><code>adding readme file
</code></pre>

<p>osvaldo@vostro:~/src/gitolite/vostro/publico$
```</p>

<p>Por último, pero no menos importante, agradecemos este <a href="http://blacka.com/david/2010/09/28/hosting-your-own-git-repositories/">post de David Blacka</a> sirvio como punto de partida para este articulo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[guia rapida de git para equipos]]></title>
    <link href="http://devops-ar.github.com/blog/2012/02/03/guia-rapida-de-git-para-equipos/"/>
    <updated>2012-02-03T01:54:00-03:00</updated>
    <id>http://devops-ar.github.com/blog/2012/02/03/guia-rapida-de-git-para-equipos</id>
    <content type="html"><![CDATA[<h2>¿Quien soy?</h2>

<p>Si se ejecuta <code>git config -l</code> deberia obtenerse algo asi.</p>

<p><code>sh
$ git config -l
user.name=Osvaldo
user.email=osvaldo@example.com
</code></p>

<p>Si no hemos configurado aun git, empecemos por ahi.</p>

<p><code>sh
git config --global user.email "osvaldo@example.com"
git config --global user.name "Osvaldo"
</code></p>

<h2>Crear un repo</h2>

<p>Se puede crear un repositorio nuevo</p>

<p><code>sh
git init
</code></p>

<p>o se puede clonar un ya existente</p>

<p><code>
git clone ssh://192.168.20.52/home/osvaldo/chef-repo .
</code></p>

<h2>Branches</h2>

<p>Una branch puede ser creado por un próposito definido (arreglar un bug, <a href="http://nvie.com/posts/a-successful-git-branching-model/">introducir una nueva funcionalidad</a>. También puede ser por usuario. De esta manera, cada uno tiene su branch, donde puede realizar las modificaciones sin afectar el trabajo que estén haciendo otros. Una vez el código esta listo para producción, se hace el merge a la branch master (<a href="http://kentnguyen.com/development/visualized-git-practices-for-team/">haciendo primero un <code>git pull -rebase</code></a>).</p>

<h2>Flujo de trabajo</h2>

<p>El flujo de trabajo con las branches seria</p>

<ul>
<li>configurar git</li>
<li>clonar el repo <code>git fetch</code></li>
<li>crear/moverme a la branch personal <code>git checkout -b otsuarez</code></li>
<li>editar <code>git -m -a ".. cambios .."</code> (nota. en la branch personal: "otsuarez").</li>
<li>cambiar a la branch principal y copiar los cambios para ahi <code>git checkout master</code> y despues <code>git merge otsuarez</code></li>
<li>actualizar el repo central. <code>git push origin master</code></li>
<li>opcionalmente podemos borrar la rama creada <code>git branch -D otsuarez</code></li>
</ul>


<h3>Referencias</h3>

<ul>
<li><a href="http://www.spheredev.org/wiki/Git_for_the_lazy">http://www.spheredev.org/wiki/Git_for_the_lazy</a></li>
<li><a href="http://help.github.com/git-cheat-sheets/">http://help.github.com/git-cheat-sheets/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
